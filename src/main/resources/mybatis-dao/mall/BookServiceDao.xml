<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.meandbooksteam2.shoppingmall.dao.mall.BookServiceDao">
    <!--책 정보와 관련된 쿼리들-->
    <!--전체 판매량 베스트 톱 10을 출력하기위해 사용하는 쿼리-->
    <select id="listAllBest" resultType="BookDto">
        SELECT row_number() OVER(order by sum(o.ORDERS_QTY) desc)
             , B.BOOK_NM
             , B.BOOK_IMG
             , B.BOOK_AUTHOR
             , B.BOOK_PUB
             , B.BOOK_PRICE
             , B.BOOK_NO
        FROM orders O
                 JOIN book b on b.BOOK_NO = O.BOOK_NO
        group by book_no limit 10
    </select>

    <!--카테고리별 판매량 베스트 톱 10을 출력하기위해 사용하는 쿼리-->
    <select id="listCateBest" resultType="BookDto" parameterType="hashmap">
        SELECT row_number() OVER(order by sum(o.ORDERS_QTY) desc)
             , B.BOOK_NM
             , B.BOOK_IMG
             , B.BOOK_AUTHOR
             , B.BOOK_PUB
             , B.BOOK_PRICE
             , B.BOOK_NO
        FROM orders O
                 JOIN book b on b.BOOK_NO = O.BOOK_NO
        WHERE SUBSTR(B.BOOK_NO,1,3) = #{category}
        group by book_no limit 10
    </select>

    <!--하나의 책에대한 자세한 정보를 가져오는 쿼리-->
    <select id="viewBook" resultType="BookDto" parameterType="hashmap">
        select BOOK_NO
             , BOOK_NM
             , BOOK_DESC
             , BOOK_PRICE
             , BOOK_STOCK
             , BOOK_IMG
             , BOOK_PUB
             , BOOK_AUTHOR
             , date_format(BOOK_PUB_DATE,'%m-%d %h:%i') "BOOK_PUB_DATE"
             , BOOK_ISBN
             , BOOK_PAGE
          from book
        where book_no = #{book_no}
    </select>

    <!--검색결과를 가져오는 쿼리-->
    <select id="listMallBook" resultType="BookDto" parameterType="BookDto">
        SELECT B.BOOK_NM
             , B.BOOK_IMG
             , B.BOOK_AUTHOR
             , B.BOOK_PUB
             , B.BOOK_PRICE
             , B.BOOK_NO
        FROM book b
        where BOOK_NM LIKE concat('%', #{searchKeyword}, '%')
           or BOOK_AUTHOR LIKE concat('%', #{searchKeyword}, '%')
           or BOOK_NO LIKE concat(#{searchKeyword}, '%')
    </select>

    <!--index.html에서 랜덤한 추천도서를 보여주기위한 쿼리들들-->    <!--판매량 베스트 10 중 한 권을 랜덤하게 가져오는 쿼리-->
    <select id="getRandomBest" resultType="BookDto">
        select BOOK_NO
             , book_nm
             , book_img
             , BOOK_DESC
             , book_author
             , book_price
        from
            (SELECT row_number() OVER(order by sum(o.ORDERS_QTY) desc)
                  , B.BOOK_NM
                  , B.BOOK_IMG
                  , B.BOOK_AUTHOR
                  , B.BOOK_DESC
                  , B.BOOK_PRICE
                  , B.BOOK_NO
             FROM orders O
                      JOIN book b on b.BOOK_NO = O.BOOK_NO
             group by book_no limit 10) best
        order by rand() limit 1
    </select>

    <!--이달의 신작중 랜덤하게 한 건을 가져오는 쿼리-->
    <select id="getMonthlySpecial" resultType="BookDto">
        select BOOK_NO
             , BOOK_NM
             , BOOK_DESC
             , BOOK_PRICE
             , BOOK_IMG
             , BOOK_AUTHOR
          from book
         where BOOK_PUB_DATE >= LAST_DAY(NOW() - interval 1 month) + interval 1 DAY /*현재날짜 - 한달의 마지막날 + 1일로 각 월의 첫날을 구함*/
        order by rand() limit 1
    </select>

    <!--장바구니 관련 쿼리-->
    <!--장바구니에 담을때 사용하는 DML-->
    <insert id="insertCart" parameterType="hashmap">
        insert into cart(cart_no, mem_no, book_no, cart_qty)
        values(#{cart_no}, #{mem_no}, #{book_no}, #{cart_qty})
    </insert>

    <!--장바구니에 담을때, 장바구니 번호를 주기위해 사용하는 쿼리-->
    <select id="getTodayCart" resultType="long" parameterType="string">
        select IFNULL(max(CART_NO), 0) from cart where CART_NO like concat(#{formattingDate}, '%')
    </select>

    <!--리뷰, 댓글과 관련된 쿼리-->
    <!--리뷰에서 조인하기 위해 사용하는 resultMap-->
    <resultMap id="MemberDto" type="MemberDto">
        <result column="mem_uid" property="mem_uid"></result>
    </resultMap>
    <resultMap id="RevCmtDto" type="RevCmtDto">
        <result column="rev_no" property="rev_no"></result>
        <result column="cmt_no" property="cmt_no"></result>
        <result column="mem_no" property="mem_no"></result>
        <result column="CMT_CONTENT" property="cmt_content"></result>
        <result column="CMT_DATE" property="cmt_date"></result>
        <collection property="member" resultMap="MemberDto"></collection>
    </resultMap>
    <resultMap id="ReviewDto" type="ReviewDto">
        <result column="rev_title" property="rev_title"></result>
        <result column="rev_no" property="rev_no"></result>
        <result column="mem_no" property="mem_no"></result>
        <result column="REV_CONTENT" property="rev_content"></result>
        <result column="REV_RATING" property="rev_rating"></result>
        <result column="REV_DATE" property="rev_date"/>
        <collection property="member" resultMap="MemberDto"></collection>
        <collection property="rev_cmt" resultMap="RevCmtDto"></collection>
    </resultMap>
    
    <!--리뷰 작성에 권한을 주기위해 회원이 실제로 구매하였는지 조회하는 쿼리-->
    <select id="reviewAuth" parameterType="string" resultType="_int">
        select count(*)
        from orders
        where orders_status = 3
          and mem_no = #{param1}
          and book_no = #{param2}
    </select>

    <!--해당 책에 대한 리뷰들을 가져오는 쿼리-->
    <select id="listReview" resultMap="ReviewDto" parameterType="hashmap">
        select r.REV_NO
             , m.mem_uid
             , m.mem_no
             , r.REV_TITLE
             , r.REV_NO
             , r.REV_CONTENT
             , r.REV_RATING
             , date_format(r.REV_DATE,'%m-%d %h:%i') "REV_DATE"
        from review r join member m
        on r.MEM_NO = m.MEM_NO
        where r.BOOK_NO = #{book_no}
    </select>

    <!--바인딩 변수로 받은 리뷰번호와 맞는 댓글을 가져오는 쿼리-->
    <select id="listRevCmt" resultMap="RevCmtDto" parameterType="hashmap">
        select rc.cmt_no
             , rc.rev_no
             , rc.mem_no
             , m.mem_uid
             , rc.cmt_content
             , date_format(rc.CMT_DATE,'%m-%d %H:%i') "CMT_DATE"
        from rev_cmt rc join review r
                             on rc.REV_NO = r.REV_NO
                        join book b
                             on r.BOOK_NO = b.book_no
                        join member m
                             on rc.mem_no = m.mem_no
        where r.BOOK_NO = #{book_no}
        order by cmt_no desc limit 5
    </select>

    <!--사용자가 입력한 리뷰를 DB에 저장하는 쿼리-->
    <insert id="insertReview" parameterType="hashmap">
        insert into review(MEM_NO, BOOK_NO, REV_TITLE, REV_CONTENT, REV_RATING, REV_DATE)
        values (#{mem_no}, #{book_no}, #{rev_title}, #{rev_content}, #{rev_rating}, now())
    </insert>

    <!--사용자가 입력한 댓글을 DB에 저장하는 쿼리-->
    <insert id="insertRevCmt" parameterType="hashmap">
        insert into rev_cmt(MEM_NO, REV_NO, CMT_CONTENT, CMT_DATE)
        values (#{mem_no}, #{rev_no}, #{cmt_content}, now())
    </insert>

    <select id="getOneCmt" parameterType="string" resultType="RevCmtDto">
        select CMT_NO, CMT_CONTENT, CMT_DATE from rev_cmt where CMT_NO=#{cmt_no}
    </select>
    <select id="getOneRev" parameterType="string" resultType="ReviewDto">
        select REV_NO, REV_TITLE, REV_CONTENT, REV_RATING from review where REV_NO=#{rev_no}
    </select>

    <!--리뷰를 수정하는 DML-->
    <update id="updateReview" parameterType="hashmap">
        update review set
                          REV_TITLE = #{rev_title}
                        , REV_CONTENT = #{rev_content}
                        , REV_RATING = #{rev_rating}
                        , REV_DATE = now()
                      where REV_NO=#{rev_no}
    </update>

    <!--리뷰를 삭제하는 DML-->
    <!--on delete cascade를 이용하여 댓글도 삭제될 수 있도록 함-->
    <delete id="deleteReview" parameterType="hashmap">
        delete from review where REV_NO = #{rev_no}
    </delete>

    <!--댓글을 수정하는 DML-->
    <update id="updateRevCmt" parameterType="hashmap">
        update rev_cmt set
                          CMT_CONTENT = #{cmt_content}
                        , CMT_DATE = now()
                      where CMT_NO=#{cmt_no}
    </update>

    <!--댓글을 삭제하는 DML-->
    <delete id="deleteRevCmt" parameterType="hashmap">
        delete from rev_cmt where CMT_NO = #{cmt_no}
    </delete>

    <!--페이징을 위해 해당 검색어와 매칭되는 row가 몇 건인지 가져오는 쿼리-->
    <select id="selectSearchedCount" parameterType="BookDto" resultType="_int">
        select count(*)
        from book
        where BOOK_NM LIKE concat('%', #{searchKeyword}, '%')
           or BOOK_AUTHOR LIKE concat('%', #{searchKeyword}, '%')
           or BOOK_NO LIKE concat(#{searchKeyword}, '%')
    </select>
    
</mapper>
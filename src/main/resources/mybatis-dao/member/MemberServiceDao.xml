<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.meandbooksteam2.shoppingmall.dao.member.MemberServiceDao">

    <!--입력한 아이디와 비밀번호에 해당하는 것을 카운트 해서 1인 경우에만 로그인 되도록 할 것-->
    <select id="login" parameterType="hashmap" resultType="_int">
        select count(*) from member where mem_uid=#{mem_uid} and mem_pwd=#{mem_pwd}
    </select>

    <!--회원가입, 관리자는 회원가입 안하니까 그냥 0으로 줘서 일반회원 만들고, 마일리지도 0으로 주고, 액세서블은 1(로그인 가능)-->
    <!--디폴트값 확인하고 수정-->
    <insert id="register" parameterType="hashmap">
        insert into member
            (mem_uid
            ,mem_pwd
            ,mem_nm
            ,mem_phoneNo
            ,MEM_ADDR1
            ,MEM_ADDR2
            ,MEM_ADDR3
            ,mem_email
            ,mem_mileage
            ,is_admin)
        values
            (#{mem_uid}
            ,#{mem_pwd}
            ,#{mem_nm}
            ,#{mem_phoneno}
            ,#{mem_addr1}
            ,#{mem_addr2}
            ,#{mem_addr3}
            ,#{mem_email}
            ,0
            ,0)
    </insert>

    <!--아이디 중복 체크 눌러서 테이블에 동일 아이디 있다면 못쓰도록 분기처리-->
    <select id="checkId" parameterType="hashmap" resultType="_int">
        select count(*) from member where mem_uid=#{mem_uid}
    </select>

    <!--내 정보 확인 - 세션에 있는 mem_uid를 받아서 값 리턴-->
    <select id="viewMyInfo" parameterType="hashmap" resultType="MemberDto">
        select mem_uid
              ,mem_pwd
              ,mem_nm
              ,mem_phoneNo
              ,mem_addr1
              ,mem_addr2
              ,mem_addr3
              ,mem_email
              ,mem_mileage
        from member where mem_uid=#{mem_uid}
    </select>

    <!--내 정보 수정(일단 탈퇴도 여기 넣어놨음 - 어떻게 할지 고민)-->
    <update id="updateMyInfo" parameterType="hashmap">
        update member set mem_phoneNo = #{mem_phoneNo}
                         ,mem_addr1 = #{mem_addr1}
                         ,mem_addr2 = #{mem_addr2}
                         ,mem_addr3 = #{mem_addr3}
                         ,mem_email = #{mem_email}
        where mem_uid = #{mem_uid}
    </update>

    <update id="withdraw" parameterType="hashmap">
        update member set `accessible` = 1 where mem_uid= #{mem_uid}
    </update>

    <!--내 주문목록 조회 - 리스트는 어떻게 할지 고민-->
    <select id="listMyOrders" parameterType="hashmap" resultType="OrdersDto">
        select b.book_nm
             , b.book_price
             , b.book_img
             , b.book_author
             , o.orders_qty
             , o.orders_status
        from book b join orders o
        on b.book_no = o.book_no
        where o.mem_no = #{mem_no}
    </select>

    <!--개별 주문 조회 - resultMap사용 시작-->
    <resultMap id="BookDto" type="BookDto">
        <result column="book_nm" property="book_nm"/>
        <result column="book_price" property="book_price"/>
        <result column="book_img" property="book_img"/>
        <result column="book_author" property="book_author"/>
    </resultMap>
    <resultMap id="OrdersDto" type="OrdersDto">
        <result column="orders_nm" property="orders_nm"/>
        <result column="orders_phoneNo" property="orders_phoneNo"/>
        <result column="orders_addr" property="orders_addr"/>
        <result column="orders_qty" property="orders_qty"/>
        <result column="orders_status" property="orders_status"/>
    </resultMap>

    <select id="viewMyOrder" parameterType="OrdersDto" resultMap="OrdersDto">
        select b.book_nm
             , b.book_price
             , b.book_img
             , b.book_author
             , o.orders_nm
             , o.orders_phoneNo
             , o.orders_addr1
             , o.orders_addr2
             , o.orders_addr3
             , o.orders_qty
             , o.orders_status
        from orders o join book b
        on b.book_no = o.book_no
        where o.mem_no = #{mem_no}
    </select>

    <!--주문취소-->
    <delete id="cancelOrder" parameterType="hashmap">
        delete from orders
        where orders_no = #{orders_no}
    </delete>

    <!--환불신청 - refund_no, orders_no 로직 짜서 넣어야 할 듯...-->
    <insert id="refund" parameterType="hashmap">
        insert into refund
            (refund_no
            ,orders_no
            ,refund_desc)
        values
            (#{refund_no}
            ,#{orders_no}
            ,#{refund_desc})
    </insert>

    <!--비회원 주문조회 - resultMap 사용 시작-->
    <resultMap id="NoMemOrdersDto" type="NoMemOrdersDto">
        <result column="orders_nm" property="orders_nm"/>
        <result column="orders_phoneNo" property="orders_phoneNo"/>
        <result column="orders_addr" property="orders_addr"/>
        <result column="orders_qty" property="orders_qty"/>
        <result column="orders_status" property="orders_status"/>
        <collection property="bookDto" resultMap="BookDto"/>
    </resultMap>

    <select id="viewNoMemberOrder" parameterType="NoMemOrdersDto" resultMap="NoMemOrdersDto">
        select b.book_nm
             , b.book_price
             , b.book_img
             , b.book_author
             , n.orders_nm
             , n.orders_phoneNo
             , n.orders_addr1
             , n.orders_addr2
             , n.orders_addr3
             , n.orders_qty
             , n.orders_status
        from book b join no_mem_orders n
        on b.book_no = n.book_no
    </select>
    <!--비회원 주문조회 - resultMap 사용 끝-->

    <!--비회원 환불신청 - 수정 필요-->
    <insert id="refundNoMem" parameterType="hashmap">
        insert into refund
        (refund_no
        ,orders_no
        ,refund_desc)
        values
            (#{refund_no}
            ,#{orders_no}
            ,#{refund_desc})
    </insert>

    <!--비회원 주문취소-->
    <delete id="deleteNoMemberOrder" parameterType="hashmap">
        delete from no_mem_orders
        where orders_no = #{orders_no}
    </delete>

    <!--환불 번호를 넣기위해 오늘 환불 신청된 모든 건을 가져오는 쿼리-->
    <select id="getTodayRefund" resultType="_int">
        select count(*) from refund where refund_date >= curdate()
    </select>

    <!--위 쿼리의 비회원용-->
    <select id="getTodayNoMemberRefund" resultType="_int">
        select count(*) from no_mem_refund where refund_date >= curdate()
    </select>

    <select id="isAdmin" resultType="_int" parameterType="string">
        select IS_ADMIN from member where MEM_UID = #{mem_uid}
    </select>
</mapper>
